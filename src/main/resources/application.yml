server:
  port: 8080  # Puerto donde se levantar√° el API Gateway

spring:
  application:
    name: api-gateway  # Este nombre aparecer√° en Eureka como identificador del servicio

  cloud:
    gateway:
      routes:  # Aqu√≠ definimos las rutas que el gateway debe redirigir
        - id: pokemon-service
          uri: lb://pokemon-service  # 'lb' = LoadBalancer ‚Üí buscar√° el servicio por nombre en Eureka
          predicates:
            - Path=/api/pokemon/**, /pokemon/**, /pokemon/v3/api-docs, /pokemon/swagger-ui.html, /pokemon/swagger-ui/**, /v3/api-docs/**  # Toda URL que empiece con esto ser√° redirigida
          filters:
            - StripPrefix=1  # üî• Esto elimina "/pokemon" del path antes de enviarlo al servicio

springdoc:
  swagger-ui:
    urls:
      - name: pokemon-service
        url: /pokemon/v3/api-docs
        # Esto le dice a Swagger: ‚ÄúMuestra el Swagger de pokemon-service desde esta ruta.‚Äù

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8701/eureka/  # Direcci√≥n del Discovery Server (Eureka)


# Explicaci√≥n a fondo
#Secci√≥n	                            ¬øQu√© hace?
#server.port	                        Define el puerto local del Gateway (por defecto es 8080, buena pr√°ctica para el frontend de entrada).
#spring.application.name	            Nombre del microservicio, fundamental para que Eureka lo registre correctamente.
#spring.cloud.gateway.routes	        Configura las rutas que intercepta el Gateway y hacia d√≥nde las redirige.
#uri: lb://pokemon-service	            Significa "LoadBalance a pokemon-service registrado en Eureka". Esto permite el descubrimiento din√°mico.
#predicates	                            Define bajo qu√© condiciones se redirige una petici√≥n. Aqu√≠: cuando el path empieza con /api/pokemon/.
#eureka.client.service-url.defaultZone	Apunta a la URL donde est√° corriendo el Eureka Server. En este caso, es localhost:8701.
